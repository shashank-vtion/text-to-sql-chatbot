AWSTemplateFormatVersion: '2010-09-09'
Description: 'Text-to-SQL Chatbot Deployment'

Parameters:
  SecretName:
    Type: String
    Description: Name of the secret in AWS Secrets Manager
    Default: text-to-sql-chatbot-secrets

Resources:
  # Lambda Function Role
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess
      Policies:
        - PolicyName: SecretsManagerAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                Resource: !Sub arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:${SecretName}-*

  # Lambda Function
  ChatbotFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: text-to-sql-chatbot
      Handler: src.main.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: python3.9
      Timeout: 30
      MemorySize: 512
      Environment:
        Variables:
          SECRET_NAME: !Ref SecretName
      Code:
        S3Bucket: !Sub lambda-deployment-${AWS::AccountId}
        S3Key: text-to-sql-chatbot.zip

  # API Gateway
  ChatbotAPI:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: text-to-sql-chatbot-api
      Description: API for Text-to-SQL Chatbot

  # API Gateway Resource
  ChatbotResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ChatbotAPI
      ParentId: !GetAtt ChatbotAPI.RootResourceId
      PathPart: 'api'

  # API Gateway Method
  ChatbotMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ChatbotAPI
      ResourceId: !Ref ChatbotResource
      HttpMethod: ANY
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ChatbotFunction.Arn}/invocations

  # API Gateway Deployment
  ChatbotDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn: ChatbotMethod
    Properties:
      RestApiId: !Ref ChatbotAPI
      StageName: prod

  # Lambda Permission
  ChatbotPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref ChatbotFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ChatbotAPI}/*/ANY/api

Outputs:
  ApiEndpoint:
    Description: API Gateway endpoint URL
    Value: !Sub https://${ChatbotAPI}.execute-api.${AWS::Region}.amazonaws.com/prod/api
